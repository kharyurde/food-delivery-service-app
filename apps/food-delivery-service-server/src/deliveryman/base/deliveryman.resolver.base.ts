/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Deliveryman } from "./Deliveryman";
import { DeliverymanCountArgs } from "./DeliverymanCountArgs";
import { DeliverymanFindManyArgs } from "./DeliverymanFindManyArgs";
import { DeliverymanFindUniqueArgs } from "./DeliverymanFindUniqueArgs";
import { CreateDeliverymanArgs } from "./CreateDeliverymanArgs";
import { UpdateDeliverymanArgs } from "./UpdateDeliverymanArgs";
import { DeleteDeliverymanArgs } from "./DeleteDeliverymanArgs";
import { DeliverymanService } from "../deliveryman.service";
@graphql.Resolver(() => Deliveryman)
export class DeliverymanResolverBase {
  constructor(protected readonly service: DeliverymanService) {}

  async _deliverymenMeta(
    @graphql.Args() args: DeliverymanCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Deliveryman])
  async deliverymen(
    @graphql.Args() args: DeliverymanFindManyArgs
  ): Promise<Deliveryman[]> {
    return this.service.deliverymen(args);
  }

  @graphql.Query(() => Deliveryman, { nullable: true })
  async deliveryman(
    @graphql.Args() args: DeliverymanFindUniqueArgs
  ): Promise<Deliveryman | null> {
    const result = await this.service.deliveryman(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Deliveryman)
  async createDeliveryman(
    @graphql.Args() args: CreateDeliverymanArgs
  ): Promise<Deliveryman> {
    return await this.service.createDeliveryman({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Deliveryman)
  async updateDeliveryman(
    @graphql.Args() args: UpdateDeliverymanArgs
  ): Promise<Deliveryman | null> {
    try {
      return await this.service.updateDeliveryman({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Deliveryman)
  async deleteDeliveryman(
    @graphql.Args() args: DeleteDeliverymanArgs
  ): Promise<Deliveryman | null> {
    try {
      return await this.service.deleteDeliveryman(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
